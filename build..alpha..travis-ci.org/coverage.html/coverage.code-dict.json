{"/home/travis/build/npmtest/node-npmtest-node-etcd/test.js":"/* istanbul instrument in package npmtest_node_etcd */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-etcd/lib.npmtest_node_etcd.js":"/* istanbul instrument in package npmtest_node_etcd */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_etcd = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_etcd = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-etcd/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-etcd && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_etcd */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_etcd\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_etcd.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_node_etcd.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_etcd.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_node_etcd.__dirname +\n                    '/lib.npmtest_node_etcd.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-etcd/node_modules/node-etcd/lib/index.js":"// Generated by CoffeeScript 1.9.1\nvar Client, Etcd, HttpsAgent, URL, Watcher, _, exports,\n  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\n_ = require('underscore');\n\nWatcher = require('./watcher');\n\nClient = require('./client');\n\nHttpsAgent = (require('https')).Agent;\n\nURL = require('url-parse');\n\nEtcd = (function() {\n  function Etcd(hosts, options) {\n    if (hosts == null) {\n      hosts = \"127.0.0.1:2379\";\n    }\n    if (options == null) {\n      options = {};\n    }\n    this.watcher = bind(this.watcher, this);\n    this.hosts = this._cleanHostList(hosts);\n    this.client = new Client(this.hosts, options, null);\n  }\n\n  Etcd.prototype.set = function(key, value, options, callback) {\n    var opt, ref;\n    ref = this._argParser(options, callback), options = ref[0], callback = ref[1];\n    opt = this._prepareOpts(\"keys/\" + this._stripSlashPrefix(key), \"/v2\", value, options);\n    return this.client.put(opt, callback);\n  };\n\n  Etcd.prototype.setSync = function(key, value, options) {\n    if (options == null) {\n      options = {};\n    }\n    options.synchronous = true;\n    return this.set(key, value, options);\n  };\n\n  Etcd.prototype.get = function(key, options, callback) {\n    var opt, ref;\n    ref = this._argParser(options, callback), options = ref[0], callback = ref[1];\n    opt = this._prepareOpts(\"keys/\" + this._stripSlashPrefix(key), \"/v2\", null, options);\n    return this.client.get(opt, callback);\n  };\n\n  Etcd.prototype.getSync = function(key, options) {\n    if (options == null) {\n      options = {};\n    }\n    options.synchronous = true;\n    return this.get(key, options);\n  };\n\n  Etcd.prototype.create = function(dir, value, options, callback) {\n    var opt, ref;\n    ref = this._argParser(options, callback), options = ref[0], callback = ref[1];\n    opt = this._prepareOpts(\"keys/\" + this._stripSlashPrefix(dir), \"/v2\", value, options);\n    return this.client.post(opt, callback);\n  };\n\n  Etcd.prototype.post = Etcd.prototype.create;\n\n  Etcd.prototype.del = function(key, options, callback) {\n    var opt, ref;\n    ref = this._argParser(options, callback), options = ref[0], callback = ref[1];\n    opt = this._prepareOpts(\"keys/\" + this._stripSlashPrefix(key), \"/v2\", null, options);\n    return this.client[\"delete\"](opt, callback);\n  };\n\n  Etcd.prototype[\"delete\"] = Etcd.prototype.del;\n\n  Etcd.prototype.delSync = function(key, options) {\n    if (options == null) {\n      options = {};\n    }\n    options.synchronous = true;\n    return this.del(key, options);\n  };\n\n  Etcd.prototype.mkdir = function(dir, options, callback) {\n    var ref;\n    ref = this._argParser(options, callback), options = ref[0], callback = ref[1];\n    options.dir = true;\n    return this.set(dir, null, options, callback);\n  };\n\n  Etcd.prototype.mkdirSync = function(dir, options) {\n    if (options == null) {\n      options = {};\n    }\n    options.synchronous = true;\n    return this.mkdir(dir, options);\n  };\n\n  Etcd.prototype.rmdir = function(dir, options, callback) {\n    var ref;\n    ref = this._argParser(options, callback), options = ref[0], callback = ref[1];\n    options.dir = true;\n    return this.del(dir, options, callback);\n  };\n\n  Etcd.prototype.rmdirSync = function(dir, options) {\n    if (options == null) {\n      options = {};\n    }\n    options.synchronous = true;\n    return this.rmdir(dir, options);\n  };\n\n  Etcd.prototype.compareAndSwap = function(key, value, oldvalue, options, callback) {\n    var ref;\n    ref = this._argParser(options, callback), options = ref[0], callback = ref[1];\n    if (options == null) {\n      options = {};\n    }\n    options.prevValue = oldvalue;\n    return this.set(key, value, options, callback);\n  };\n\n  Etcd.prototype.testAndSet = Etcd.prototype.compareAndSwap;\n\n  Etcd.prototype.compareAndDelete = function(key, oldvalue, options, callback) {\n    var ref;\n    ref = this._argParser(options, callback), options = ref[0], callback = ref[1];\n    if (options == null) {\n      options = {};\n    }\n    options.prevValue = oldvalue;\n    return this.del(key, options, callback);\n  };\n\n  Etcd.prototype.testAndDelete = Etcd.prototype.compareAndDelete;\n\n  Etcd.prototype.raw = function(method, key, value, options, callback) {\n    var opt, ref;\n    ref = this._argParser(options, callback), options = ref[0], callback = ref[1];\n    opt = this._prepareOpts(key, \"\", value, options);\n    return this.client.execute(method, opt, callback);\n  };\n\n  Etcd.prototype.watch = function(key, options, callback) {\n    var ref;\n    ref = this._argParser(options, callback), options = ref[0], callback = ref[1];\n    if (options == null) {\n      options = {};\n    }\n    options.wait = true;\n    return this.get(key, options, callback);\n  };\n\n  Etcd.prototype.watchIndex = function(key, index, options, callback) {\n    var ref;\n    ref = this._argParser(options, callback), options = ref[0], callback = ref[1];\n    if (options == null) {\n      options = {};\n    }\n    options.waitIndex = index;\n    return this.watch(key, options, callback);\n  };\n\n  Etcd.prototype.watcher = function(key, index, options) {\n    if (index == null) {\n      index = null;\n    }\n    if (options == null) {\n      options = {};\n    }\n    return new Watcher(this, key, index, options);\n  };\n\n  Etcd.prototype.machines = function(callback) {\n    var opt;\n    opt = this._prepareOpts(\"keys/_etcd/machines\");\n    return this.client.get(opt, callback);\n  };\n\n  Etcd.prototype.getHosts = function() {\n    return _.clone(this.hosts);\n  };\n\n  Etcd.prototype.leader = function(callback) {\n    var opt;\n    opt = this._prepareOpts(\"leader\");\n    return this.client.get(opt, callback);\n  };\n\n  Etcd.prototype.leaderStats = function(callback) {\n    var opt;\n    opt = this._prepareOpts(\"stats/leader\");\n    return this.client.get(opt, callback);\n  };\n\n  Etcd.prototype.selfStats = function(callback) {\n    var opt;\n    opt = this._prepareOpts(\"stats/self\");\n    return this.client.get(opt, callback);\n  };\n\n  Etcd.prototype.version = function(callback) {\n    var opt;\n    opt = this._prepareOpts(\"version\", \"\");\n    return this.client.get(opt, callback);\n  };\n\n  Etcd.prototype._stripSlashPrefix = function(key) {\n    return key.replace(/^\\//, '');\n  };\n\n  Etcd.prototype._prepareOpts = function(path, apiVersion, value, allOpts) {\n    var clientOptions, opt, queryString;\n    if (apiVersion == null) {\n      apiVersion = \"/v2\";\n    }\n    if (value == null) {\n      value = null;\n    }\n    if (allOpts == null) {\n      allOpts = {};\n    }\n    queryString = _.omit(allOpts, 'maxRetries', 'synchronous');\n    clientOptions = _.pick(allOpts, 'maxRetries');\n    return opt = {\n      path: apiVersion + \"/\" + path,\n      json: true,\n      qs: queryString,\n      clientOptions: clientOptions,\n      synchronous: allOpts.synchronous,\n      form: value != null ? {\n        value: value\n      } : void 0,\n      agentOptions: this.sslopts != null ? this.sslopts : void 0\n    };\n  };\n\n  Etcd.prototype._argParser = function(options, callback) {\n    if (options == null) {\n      options = {};\n    }\n    if (typeof options === 'function') {\n      return [{}, options];\n    } else {\n      return [options, callback];\n    }\n  };\n\n  Etcd.prototype._cleanHostList = function(hosts) {\n    var hostlist;\n    hostlist = _.isArray(hosts) ? hosts : [hosts];\n    return hostlist.map(function(host) {\n      var url;\n      url = new URL(host);\n      if (url.protocol === '') {\n        url.set('protocol', 'http:');\n      }\n      return url.href.replace(/\\/$/, \"\");\n    });\n  };\n\n  return Etcd;\n\n})();\n\nexports = module.exports = Etcd;\n","/home/travis/build/npmtest/node-npmtest-node-etcd/node_modules/node-etcd/lib/watcher.js":"// Generated by CoffeeScript 1.9.1\nvar EventEmitter, Watcher, exports,\n  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },\n  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },\n  hasProp = {}.hasOwnProperty;\n\nEventEmitter = require('events').EventEmitter;\n\nWatcher = (function(superClass) {\n  extend(Watcher, superClass);\n\n  function Watcher(etcd, key, index, options) {\n    this.etcd = etcd;\n    this.key = key;\n    this.index = index != null ? index : null;\n    this.options = options != null ? options : {};\n    this._retry = bind(this._retry, this);\n    this._respHandler = bind(this._respHandler, this);\n    this._resync = bind(this._resync, this);\n    this._unexpectedData = bind(this._unexpectedData, this);\n    this._valueChanged = bind(this._valueChanged, this);\n    this._missingValue = bind(this._missingValue, this);\n    this._error = bind(this._error, this);\n    this._watch = bind(this._watch, this);\n    this.stop = bind(this.stop, this);\n    this.stopped = false;\n    this.retryAttempts = 0;\n    this._watch();\n  }\n\n  Watcher.prototype.stop = function() {\n    this.stopped = true;\n    this.request.abort();\n    return this.emit('stop', \"Watcher for '\" + this.key + \"' aborted.\");\n  };\n\n  Watcher.prototype._watch = function() {\n    if (this.index === null) {\n      return this.request = this.etcd.watch(this.key, this.options, this._respHandler);\n    } else {\n      return this.request = this.etcd.watchIndex(this.key, this.index, this.options, this._respHandler);\n    }\n  };\n\n  Watcher.prototype._error = function(err) {\n    var error;\n    error = new Error('Connection error, reconnecting.');\n    error.error = err;\n    error.reconnectCount = this.retryAttempts;\n    this.emit('reconnect', error);\n    return this._retry();\n  };\n\n  Watcher.prototype._missingValue = function(headers) {\n    var error;\n    error = new Error('Etcd timed out watcher, reconnecting.');\n    error.headers = headers;\n    this.retryAttempts = 0;\n    this.emit('reconnect', error);\n    return this._watch();\n  };\n\n  Watcher.prototype._valueChanged = function(val, headers) {\n    this.retryAttempts = 0;\n    this.index = val.node.modifiedIndex + 1;\n    this.emit('change', val, headers);\n    if (val.action != null) {\n      this.emit(val.action, val, headers);\n    }\n    return this._watch();\n  };\n\n  Watcher.prototype._unexpectedData = function(val, headers) {\n    var error;\n    error = new Error('Received unexpected response');\n    error.response = val;\n    this.emit('error', error);\n    return this._retry();\n  };\n\n  Watcher.prototype._resync = function(err) {\n    this.index = err.error.index;\n    this.retryAttempts = 0;\n    this.emit('resync', err);\n    return this._watch();\n  };\n\n  Watcher.prototype._respHandler = function(err, val, headers) {\n    var ref, ref1;\n    if (this.stopped) {\n      return;\n    }\n    if ((err != null ? err.errorCode : void 0) === 401 && (((ref = err.error) != null ? ref.index : void 0) != null)) {\n      return this._resync(err);\n    } else if (err) {\n      return this._error(err);\n    } else if (((headers != null ? headers['x-etcd-index'] : void 0) != null) && (val == null)) {\n      return this._missingValue(headers);\n    } else if ((val != null ? (ref1 = val.node) != null ? ref1.modifiedIndex : void 0 : void 0) != null) {\n      return this._valueChanged(val, headers);\n    } else {\n      return this._unexpectedData(val, headers);\n    }\n  };\n\n  Watcher.prototype._retry = function() {\n    var timeout;\n    timeout = (Math.pow(2, this.retryAttempts) * 300) + (Math.round(Math.random() * 1000));\n    setTimeout(this._watch, timeout);\n    return this.retryAttempts++;\n  };\n\n  return Watcher;\n\n})(EventEmitter);\n\nexports = module.exports = Watcher;\n","/home/travis/build/npmtest/node-npmtest-node-etcd/node_modules/node-etcd/lib/client.js":"// Generated by CoffeeScript 1.9.1\nvar CancellationToken, Client, _, deasync, defaultClientOptions, defaultRequestOptions, exports, request,\n  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\nrequest = require('request');\n\ndeasync = require('deasync');\n\n_ = require('underscore');\n\ndefaultRequestOptions = {\n  pool: {\n    maxSockets: 100\n  },\n  followAllRedirects: true\n};\n\ndefaultClientOptions = {\n  maxRetries: 3\n};\n\nCancellationToken = (function() {\n  function CancellationToken(servers1, maxRetries, retries1, errors1) {\n    this.servers = servers1;\n    this.maxRetries = maxRetries;\n    this.retries = retries1 != null ? retries1 : 0;\n    this.errors = errors1 != null ? errors1 : [];\n    this.abort = bind(this.abort, this);\n    this.isAborted = bind(this.isAborted, this);\n    this.setRequest = bind(this.setRequest, this);\n    this.aborted = false;\n  }\n\n  CancellationToken.prototype.setRequest = function(req) {\n    return this.req = req;\n  };\n\n  CancellationToken.prototype.isAborted = function() {\n    return this.aborted;\n  };\n\n  CancellationToken.prototype.abort = function() {\n    this.aborted = true;\n    if (this.req != null) {\n      return this.req.abort();\n    }\n  };\n\n  CancellationToken.prototype.cancel = CancellationToken.prototype.abort;\n\n  CancellationToken.prototype.wasAborted = CancellationToken.prototype.isAborted;\n\n  return CancellationToken;\n\n})();\n\nClient = (function() {\n  function Client(hosts, options1, sslopts) {\n    this.hosts = hosts;\n    this.options = options1;\n    this.sslopts = sslopts;\n    this._shouldRetry = bind(this._shouldRetry, this);\n    this._retry = bind(this._retry, this);\n    this._multiserverHelper = bind(this._multiserverHelper, this);\n    this[\"delete\"] = bind(this[\"delete\"], this);\n    this.patch = bind(this.patch, this);\n    this.post = bind(this.post, this);\n    this.get = bind(this.get, this);\n    this.put = bind(this.put, this);\n    this.execute = bind(this.execute, this);\n    this.syncmsg = {};\n  }\n\n  Client.prototype.execute = function(method, options, callback) {\n    var opt, servers, syncResp, token;\n    opt = _.defaults(_.clone(options), this.options, defaultRequestOptions, {\n      method: method\n    });\n    opt.clientOptions = _.defaults(opt.clientOptions, defaultClientOptions);\n    servers = _.shuffle(this.hosts);\n    token = new CancellationToken(servers, opt.clientOptions.maxRetries);\n    syncResp = this._multiserverHelper(servers, opt, token, callback);\n    if (options.synchronous === true) {\n      return syncResp;\n    } else {\n      return token;\n    }\n  };\n\n  Client.prototype.put = function(options, callback) {\n    return this.execute(\"PUT\", options, callback);\n  };\n\n  Client.prototype.get = function(options, callback) {\n    return this.execute(\"GET\", options, callback);\n  };\n\n  Client.prototype.post = function(options, callback) {\n    return this.execute(\"POST\", options, callback);\n  };\n\n  Client.prototype.patch = function(options, callback) {\n    return this.execute(\"PATCH\", options, callback);\n  };\n\n  Client.prototype[\"delete\"] = function(options, callback) {\n    return this.execute(\"DELETE\", options, callback);\n  };\n\n  Client.prototype._multiserverHelper = function(servers, options, token, callback) {\n    var host, req, reqRespHandler, syncRespHandler;\n    host = _.first(servers);\n    options.url = \"\" + host + options.path;\n    if (token.isAborted()) {\n      return;\n    }\n    if (host == null) {\n      if (this._shouldRetry(token)) {\n        return this._retry(token, options, callback);\n      }\n      return this._error(token, callback);\n    }\n    reqRespHandler = (function(_this) {\n      return function(err, resp, body) {\n        if (token.isAborted()) {\n          return;\n        }\n        if (_this._isHttpError(err, resp)) {\n          token.errors.push({\n            server: host,\n            httperror: err,\n            httpstatus: resp != null ? resp.statusCode : void 0,\n            httpbody: resp != null ? resp.body : void 0,\n            response: resp,\n            timestamp: new Date()\n          });\n          return _this._multiserverHelper(_.rest(servers), options, token, callback);\n        }\n        return _this._handleResponse(err, resp, body, callback);\n      };\n    })(this);\n    syncRespHandler = (function(_this) {\n      return function(err, body, headers) {\n        options.syncdone = true;\n        return _this.syncmsg = {\n          err: err,\n          body: body,\n          headers: headers\n        };\n      };\n    })(this);\n    if (options.synchronous === true) {\n      callback = syncRespHandler;\n    }\n    req = this._doRequest(options, reqRespHandler);\n    token.setRequest(req);\n    if (options.synchronous === true && options.syncdone === void 0) {\n      options.syncdone = false;\n      while (!options.syncdone) {\n        deasync.runLoopOnce();\n      }\n      delete options.syncdone;\n      return this.syncmsg;\n    } else {\n      return req;\n    }\n  };\n\n  Client.prototype._doRequest = function(options, reqRespHandler) {\n    return request(options, reqRespHandler);\n  };\n\n  Client.prototype._retry = function(token, options, callback) {\n    var doRetry, waitTime;\n    doRetry = (function(_this) {\n      return function() {\n        return _this._multiserverHelper(token.servers, options, token, callback);\n      };\n    })(this);\n    waitTime = this._waitTime(token.retries);\n    token.retries += 1;\n    return setTimeout(doRetry, waitTime);\n  };\n\n  Client.prototype._waitTime = function(retries) {\n    if (process.env.RUNNING_UNIT_TESTS === 'true') {\n      return 1;\n    }\n    return 100 * Math.pow(16, retries);\n  };\n\n  Client.prototype._shouldRetry = function(token) {\n    return token.retries < token.maxRetries && this._isPossibleLeaderElection(token.errors);\n  };\n\n  Client.prototype._error = function(token, callback) {\n    var error;\n    error = new Error('All servers returned error');\n    error.errors = token.errors;\n    error.retries = token.retries;\n    if (callback) {\n      return callback(error);\n    }\n  };\n\n  Client.prototype._isPossibleLeaderElection = function(errors) {\n    var checkError;\n    checkError = function(e) {\n      var ref, ref1, ref2, ref3;\n      return ((ref = e != null ? (ref1 = e.httperror) != null ? ref1.code : void 0 : void 0) === 'ECONNREFUSED' || ref === 'ECONNRESET') || ((ref2 = e != null ? (ref3 = e.httpbody) != null ? ref3.errorCode : void 0 : void 0) === 300 || ref2 === 301) || /Not current leader/.test(e != null ? e.httpbody : void 0);\n    };\n    return (errors != null) && _.every(errors, checkError);\n  };\n\n  Client.prototype._isHttpError = function(err, resp) {\n    return err || (((resp != null ? resp.statusCode : void 0) != null) && resp.statusCode >= 500);\n  };\n\n  Client.prototype._handleResponse = function(err, resp, body, callback) {\n    var error;\n    if (callback == null) {\n      return;\n    }\n    if ((body != null ? body.errorCode : void 0) != null) {\n      error = new Error((body != null ? body.message : void 0) || 'Etcd error');\n      error.errorCode = body.errorCode;\n      error.error = body;\n      return callback(error, \"\", (resp != null ? resp.headers : void 0) || {});\n    } else {\n      return callback(null, body, (resp != null ? resp.headers : void 0) || {});\n    }\n  };\n\n  return Client;\n\n})();\n\nexports = module.exports = Client;\n"}